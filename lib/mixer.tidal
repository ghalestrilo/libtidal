-------------------------------------------------------------------- Open Stage Control

:{ -------------------------------------------------------------------- Faders
let fx n = cF 0 $ "f" ++ (show n) -- Maps ID to FX Fader
    vx n = cF 0 $ "v" ++ (show n) -- Maps ID to Volume Fader
    -- px n = cF 0 $ "p" ++ (show n) -- Maps ID to Pan Knob
    px n = cF0 $ "px" ++ (show n) -- Maps ID to Pad X
    py n = cF0 $ "py" ++ (show n) -- Maps ID to Pad X
:}

-------------------------------------------------------------------- Mixer Defs
:{
let bus' rv sv = room (cF rv "room") # size (cF sv "size") # orbit 0
    bus = bus' 0.1 0.1
    fader vol = gain (vol |* cF 1 "master")
:}

-------------------------------------------------------------------- Model:Cycles as Midi Controller

-- Cycles as a midi controller for slots (slots: "modules" in a virtual eurorack)
import Data.Map (fromList,findWithDefault)

:{
cycles_knobs = Map.fromList
  [ ("pitch", 65)
  , ("decay", 80)
  , ("color", 16)
  , ("colour", 16)
  , ("shape", 17)
  , ("sweep", 18)
  , ("contour", 19)
  , ("delay_send", 12)
  , ("reverb_send", 13)
  , ("lfo_speed", 102)
  , ("gain", 7)
  , ("volume_dist", 7)
  , ("swing", 15)
  , ("chance", 14)
  ]
:}

-- cyclescc: get number of cycles encoder for requested param `name`
cyclescc name = Map.findWithDefault 0 name cycles_knobs

-- slotenc: get value from encoder for `ccname` at slot `slotnum`
:{
slotenc slotnum ccname = (|/ 128) $ cF 0 varname
  where encnum = Map.findWithDefault 0 ccname cycles_knobs
        varname = "slot_" ++ (show slotnum) ++ "_" ++ (show encnum)
:}
