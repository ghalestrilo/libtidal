let __ = "~"

-- Midi Instruments
:{
let mm = s "mm" # orbit 0 # midichan 0
    reface = s "reface" # orbit 0 # midichan 0

    axo = s "axo" # midichan "[0,9]"
    axocc  n v = once      $ ccv v # ccn n # axo
    axocc' n v = p "axofx" $ ccv v # ccn n # axo
    axoreset = do
                      axocc' 1 "1 0@1000"
    fxstut = axocc 1
    fxdrop = axocc 2
    fxdist = axocc 3
    nofx = axocc 1 0
:}

-- Model:Cycles
:{
let mc pats = p "cycles" $ stack $ zipWith (\cycleschannel pat -> pat # s "mc" # midichan cycleschannel) [0, 1, 2, 3, 4, 5] pats
    mcTrack n t pat = xfadeIn ("cycles" ++ show n) t $ pat # s "mc" # midichan n
    m1' = mcTrack 0
    m2' = mcTrack 1
    m3' = mcTrack 2
    m4' = mcTrack 3
    m5' = mcTrack 4
    m6' = mcTrack 5
    m1  = m1' 0.1
    m2  = m2' 0.1
    m3  = m3' 0.1
    m4  = m4' 0.1
    m5  = m5' 0.1
    m6  = m6' 0.1
    cyclesDecayTime value = ccn 80 # ccv (value |* 125)
    cyclesColor     value = ccn 16 # ccv (value |* 125)
    cyclesShape     value = ccn 17 # ccv (value |* 125)
    cyclesSweep     value = ccn 18 # ccv (value |* 125)
    open = cyclesDecayTime
:}

-- MIDI Track Setting: Remember to set AUTO channel to 16 (Cycles)
:{
  let bank device num = asap $ progNum num # s device # midichan 15
      mcbank num = asap $ progNum num # s "mc" # midichan 15
:}

-- TODO: chord-finding logic for model cycles
-- mcchordlist = [""]
-- chord name =


-- FM Synth helpers
:{
let fmamp op = pF ("amp" ++ show op)
    fmratio op = pF ("ratio" ++ show op)
    fmdetune op = pF ("detune" ++ show op)
    fmmod opa opb = pF ("mod" ++ show opa ++ show opb)
    fmegrate op step = pF ("egrate" ++ show op ++ show step)
    fmeglevel op step = pF ("eglevel" ++ show op ++ show step)
    fmfeedback = pF "feedback"
    fma = fmamp
    fmr = fmratio
    fmd = fmdetune
    fmm = fmmod
    fmf = fmfeedback
    fmer = fmegrate
    fmel = fmeglevel
    fmparam function = foldr (#) (gain 1) . zipWith function [1..]
    lfma = fmparam fma
    lfmr = fmparam fmr
    lfmd = fmparam fmd
    lfmer op = fmparam (fmer op)
    lfmel op = fmparam (fmel op)
:}

-- Synth Params

-- superhammond
:{
let vibrato = pF "vibrato"
    vrate = pF "vrate"
    perc = pF "perc"
    percf = pF "percf"
:}

-- supervibe
:{
let modamp = pF "modamp"
    modfreq = pF "modfreq"
:}


-- Interpretive
:{
let strum' dir i pat = fastcat ((arp dir pat):(take (fromInteger i) $ repeat (degradeBy 1 pat)))
    strum = strum' "up"
    humanize param amt = (|+ param (range (- (amt/10)) (amt/10) $ perlin))
    h = humanize
    hg = humanize gain
    :}


-- temp: looping functions
:{
let brakk' n = unit "c" # legato 1 # speed (1/n)
    brakk = brakk' 1
  :}

-------------------------------------------------------------------- Instruments
:{
let vk = s "vk" # n 3
    vs = s "vs" # n 117
    vh = s "vh" # n 2 # sus 0.08
    vo = s "vh" # n 15 # sus 1
    gretsch x = n x # s "gretsch" # bus
    -- piano x = tonal mode x # s "superpiano" # lpf 450 # bus # octave 5
    -- vibe x  = tonal mode x # s "supervibe" # lpf 500 # bus
    vibeinst = s "supervibe"
                    # modamp 0
                    # velocity 0.3
                    # lpf 900
                    # resonance 0.02
                    # octave 4
                    # sus 6
                    # orbit 3
    vibe pat = p "vibe" $ pat # vibeinst
    pianoinst = s "superpiano"
                    # lpf "[1100,300]"
                    # hpf 0
                    # bus
                    # gain 1.55
                    # octave 4
                    # velocity 0.35
                    # sus 2
                    # orbit 1
    piano pat = p "piano" $ pat # pianoinst
:}




----------------------------------------------------------------------- Mutable




-- mutable synths
:{
let timbre = pF "timbre"
    color = pF "color"
    model = pI "model"
    mode = pI "mode"
    tidesshape = pF "tidesshape"
    tidessmooth = pF "tidessmooth"
    slope = pF "slope"
    shift = pF "shift"
    engine = pI "engine"
    harm = pF "harm"
    morph = pF "morph"
    level = pF "level"
    lpgdecay = pF "lpgdecay"
    lpgcolour = pF "lpgcolour"
    lpg d c = lpgdecay d # lpgcolour c
:}

-- mutable effects
:{
let cloudspitch = pF "cloudspitch"
    cloudspos = pF "cloudspos"
    cloudssize = pF "cloudssize"
    cloudsdens = pF "cloudsdens"
    cloudstex = pF "cloudstex"
    cloudswet = pF "cloudswet"
    cloudsgain = pF "cloudsgain"
    cloudsspread = pF "cloudsspread"
    cloudsrvb = pF "cloudsrvb"
    cloudsfb = pF "cloudsfb"
    cloudsfreeze = pF "cloudsfreeze"
    cloudsmode = pF "cloudsmode"
    cloudslofi = pF "cloudslofi"
    clouds p s d t = cloudsgain 1 # cloudspos p # cloudssize s # cloudsdens d # cloudstex t
    cloudsblend w s f r = cloudsgain 1 # cloudswet w # cloudsspread s # cloudsfb f # cloudsrvb r
    elementspitch = pF "elementspitch"
    elementsstrength = pF "elementsstrength"
    elementscontour = pF "elementscontour"
    elementsbowlevel = pF "elementsbowlevel"
    elementsblowlevel = pF "elementsblowlevel"
    elementsstrikelevel = pF "elementsstrikelevel"
    elementsflow = pF "elementsflow"
    elementsmallet = pF "elementsmallet"
    elementsbowtimb = pF "elementsbowtimb"
    elementsblowtimb = pF "elementsblowtimb"
    elementsstriketimb = pF "elementsstriketimb"
    elementsgeom = pF "elementsgeom"
    elementsbright = pF "elementsbright"
    elementsdamp = pF "elementsdamp"
    elementspos = pF "elementspos"
    elementsspace = pF "elementsspace"
    elementsmodel = pI "elementsmodel"
    elementseasteregg = pI "elementseasteregg"
    mu = pF "mu"
    ringsfreq = pF "ringsfreq"
    ringsstruct = pF "ringsstruct"
    ringsbright = pF "ringsbright"
    ringsdamp = pF "ringsdamp"
    ringspos = pF "ringspos"
    ringsmodel = pF "ringsmodel"
    ringspoly = pI "ringspoly"
    ringsinternal = pI "ringsinternal"
    ringseasteregg = pI "ringseasteregg"
    rings f s b d p = ringsfreq f # ringsstruct s # ringsbright b # ringsdamp d # ringspos p
    ripplescf = pF "ripplescf"
    ripplesreson = pF "ripplesreson"
    ripplesdrive = pF "ripplesdrive"
    ripples c r d = ripplescf c # ripplesreson r # ripplesdrive d
    verbgain = pF "verbgain"
    verbwet = pF "verbwet"
    verbtime = pF "verbtime"
    verbdamp = pF "verbdamp"
    verbhp = pF "verbhp"
    verbfreeze = pI "verbfreeze"
    verbdiff = pF "verbdiff"
    verb w t d h = verbgain 1 # verbwet w # verbtime t # verbdamp d # verbhp h
:}

  -- https://mutable-instruments.net/modules/braids/manual/
:{
let braids_models = "csaw trisaw sawsq fold comb hardsync saw3 ring saw7 sawcomb toy zf vosm vowel harm fm pluk bowd blow bell drum kick cymb wtbl wmap wlin wt4 nois twnq clkn qpsk"
    braidsModelN "csaw"     = 0
    braidsModelN "trisaw"   = 1
    braidsModelN "sawsq"    = 2
    braidsModelN "fold"     = 3
    braidsModelN "comb"     = 4
    braidsModelN "hardsync" = 5
    braidsModelN "saw3"     = 6
    braidsModelN "ring"     = 7
    braidsModelN "saw7"     = 8
    braidsModelN "sawcomb"  = 9
    braidsModelN "toy"      = 10
    braidsModelN "zf"       = 11
    braidsModelN "vosm"     = 12
    braidsModelN "vowel"    = 13
    braidsModelN "harm"     = 14
    braidsModelN "fm"       = 15
    braidsModelN "pluk"     = 16
    braidsModelN "bowd"     = 17
    braidsModelN "blow"     = 18
    braidsModelN "bell"     = 19
    braidsModelN "drum"     = 20
    braidsModelN "kick"     = 21
    braidsModelN "cymb"     = 22
    braidsModelN "wtbl"     = 23
    braidsModelN "wmap"     = 24
    braidsModelN "wlin"     = 25
    braidsModelN "wt4"      = 26
    braidsModelN "nois"     = 27
    braidsModelN "twnq"     = 28
    braidsModelN "clkn"     = 29
    braidsModelN "qpsk"     = 30
    smodel = model . (braidsModelN <$>)
:}

  -- https://mutable-instruments.net/modules/plaits/manual/
:{
let plaits_engines = "anaosc wshape fm formant harm wtable chords vowel gran noisef noisep modal anabd anasn anahh"
    plaitsEngineN "anaosc"  = 0
    plaitsEngineN "wshape"  = 1
    plaitsEngineN "fm"      = 2
    plaitsEngineN "formant" = 3
    plaitsEngineN "harm"    = 4
    plaitsEngineN "wtable"  = 5
    plaitsEngineN "chords"  = 6
    plaitsEngineN "vowel"   = 7
    plaitsEngineN "gran"    = 8
    plaitsEngineN "noisef"  = 9
    plaitsEngineN "noisep"  = 10
    plaitsEngineN "modal"   = 11
    plaitsEngineN "anabd"   = 12
    plaitsEngineN "anasn"   = 13
    plaitsEngineN "anahh"   = 14
    sengine = engine . (plaitsEngineN <$>)
:}

  -- https://mutable-instruments.net/modules/tides/manual/
:{
let tides_modes = "shapes amps time freqs"
    modeN "shapes" = 0
    modeN "amps"   = 1
    modeN "times"  = 2
    modeN "freqs"  = 3
    smode = mode . (modeN <$>)
:}

:{
let rings_models = "res symp sympq mod fm rvb"
    ringsModelN "res"   = 0 -- MODAL_RESONATOR,
    ringsModelN "symp"  = 1 -- SYMPATHETIC_STRING,
    ringsModelN "sympq" = 4 -- SYMPATHETIC_STRING_QUANTIZED,
    ringsModelN "mod"   = 2 -- MODULATED/INHARMONIC_STRING,
    ringsModelN "fm"    = 3 -- 2-OP_FM_VOICE,
    ringsModelN "rvb"   = 5 -- STRING_AND_REVERB
    ringsSmodel = ringsmodel . (ringsModelN <$>)
:}





----------------------------------------------------------------------------------------- slots

-- Cycles as a midi controller for slots (slots: "modules" in a virtual eurorack)
import Data.Map (fromList,findWithDefault)

------------------------------------------------------ WIP

-- TODO: Default MI synth params -> create function
:{
modules = Map.fromList
    [ ("plaits", \n -> s "plaits"
          # harm      (slotenc n "pitch")
          # lpgdecay  (slotenc n "decay")
          # lpgcolour (slotenc n "color")
          # timbre    (slotenc n "shape")
          # morph     (slotenc n "sweep")
          # harm      (slotenc n "contour")
          # lpgdecay  (slotenc n "delay_send")
          # lpgcolour (slotenc n "reverb_send")
          # morph     (slotenc n "lfo_speed")
          # gain      (slotenc n "gain")
          # slope     (slotenc n "swing")
          # level     (slotenc n "chance")
          )
    , ("rings", \n -> ringsfreq (slotenc n "decay")
          # ringsstruct     (slotenc n "shape")
          # ringsbright     (slotenc n "color")
          # ringsdamp       (slotenc n "contour")
          # ringspos        (slotenc n "sweep")
          # ringsmodel      (slotenc n "pitch")
          -- # ringspoly       (slotenci n "")
          -- # ringsinternal   (slotenci n "")
          -- # ringseasteregg  (slotenci n "")
          )
    , ("clouds", \n -> cloudspitch  (slotenc n "pitch")
        -- # cloudspos    (slotenc n "pitch")
        # cloudsspread (slotenc n "decay")
        # cloudstex    (slotenc n "color")
        # cloudssize   (slotenc n "shape")
        # cloudsmode   (slotenc n "sweep")
        # cloudsdens   (slotenc n "contour")
        # cloudsrvb    (slotenc n "delay_send")
        # cloudsfb     (slotenc n "reverb_send")
        # cloudsgain   (slotenc n "gain")
        # cloudswet    (slotenc n "lfo_speed")
        # cloudslofi   (slotenc n "swing")
        # cloudsfreeze (slotenc n "chance")
        )
      , ("elements", \n ->
          elementspitch        (slotenc n "pitch")
        # elementsbright       (slotenc n "color")
        # elementsgeom         (slotenc n "shape")
        # elementspos          (slotenc n "sweep")
        # elementscontour      (slotenc n "contour")
        # elementsflow         (slotenc n "decay")
        # elementsdamp         (slotenc n "delay_send")
        # elementsspace        (slotenc n "reverb_send")
        # elementsmallet       (slotenc n "lfo_speed")
        # elementsstrength     (slotenc n "gain")
        # elementsstrikelevel  (slotenc n "swing" |* (127/30))
        # elementsstriketimb   (slotenc n "chance" |* (127/100))
        # elementsbowlevel     (slotenc n "delay_size")
        # elementsbowtimb      (slotenc n "delay_feedback")
        # elementsblowlevel    (slotenc n "reverb_size")
        # elementsblowtimb     (slotenc n "reverb_tone")
        )
      ]
      :}

-- -- Functions to create a slottable virtual Mutable Instrument premapped to be controller via Model:Cycles knobs
-- mapCyclesEncoders' :: (Pattern ControlMap) -> [(Pattern Double -> ControlPattern, String)] -> (Int -> Pattern ControlMap)
-- mapCyclesEncoders' placeholder list = \slotnumber ->
      -- (foldr (#) placeholder
      -- . map (\(param, encoder) -> param (slotenc slotnumber encoder))) list
--
--
-- mapCyclesEncoders ::
-- mapCyclesEncoders = mapCyclesEncoders' (mu 1)
--
-- type Encoder = (Int -> Pattern ControlMap)
--
-- type EncoderMap = (String, Encoder)
--
-- cyclesControlledMI :: String -> [(Pattern Double -> ControlPattern, String)] -> EncoderMap
-- cyclesControlledMI       name list = (name, mapCyclesEncoders' (s $ value name) list)
--
-- cyclesControlledMIEffect name list = (name, mapCyclesEncoders' (mu 1) list)


-- TODO: add following fields to rings
-- # ringspoly       (slotenci n "")
-- # ringsinternal   (slotenci n "")
-- # ringseasteregg  (slotenci n "")

-- Slottable Modules (call with slot <n> <name>)
-- modules :: EncoderMap
-- modules = Map.fromList
--     [ cyclesControlledMI "plaits"
--         [ (timbre,    "shape")
--         , (harm,      "contour")
--         , (morph,     "sweep")
--         , (lpgdecay,  "decay")
--         , (lpgcolour, "color")
--         , (gain,      "gain")
--         ]
--     , cyclesControlledMIEffect "rings"
--         [ (ringsfreq,   "decay")
--         , (ringsstruct, "shape")
--         , (ringsbright, "color")
--         , (ringsdamp,   "contour")
--         , (ringspos,    "sweep")
--         , (ringsmodel,  "pitch")
--         ]
--     , cyclesControlledMIEffect "clouds"
--       [ (cloudspitch,  "pitch")
--       , (cloudspos,    "pitch")
--       , (cloudsspread, "decay")
--       , (cloudstex,    "color")
--       , (cloudssize,   "shape")
--       , (cloudsmode,   "sweep")
--       , (cloudsdens,   "contour")
--       , (cloudsrvb,    "delay_send")
--       , (cloudsfb,     "reverb_send")
--       , (cloudsgain,   "gain")
--       , (cloudswet,    "lfo_speed")
--       , (cloudslofi,   "swing")
--       , (cloudsfreeze, "chance")
--       ]
--     ]

-- SLOT: Assign module (from modules above, by name) to 1-16 virtual control "slots"
slot index name = (Map.findWithDefault (\_ -> gain 1) name modules) index
