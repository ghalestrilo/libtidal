-- Rhythm Builders | rd: rhythm define
:{
let rhythm' f x = map f . build x -- builds a rhythm passing a pattern builder and the voices
    rhythm x = rhythm n -- whar?
    gs pat a b = gain $ sew pat a b -- Helper function (gain . sew)
    l = build
    rd' f name patlist = (name, map f patlist)
    rd = rd' id
:}



-- TODO: Rhythm variations
:{
let var = pI "var"
    getVariation pat = maybe 0 ivalue <$> Map.lookup "var" <$> pat
:}
-- pass this into pickF (?)
-- in getVariation $ n "0 1 2" # var 4



 -- RHYTHM DICTIONARY
:{
let rhythms = Map.fromList $ l
      (rd "axe"      $ l "~ <[0 0] [0 0 ~ 0]>" (slow 2 $ "0*16" # gs "t f f t f f t t f f t f f t f f" "1.08" "0.85") "~")
      (rd "baiao"    $ l "0@3 0@5" ("0*4" # gs "f!2 t f" "0.8" "1"))
      (rd "brega"    $ l "0*2" "~@3 0 . ~ 0" "[0 0 0  ~]*2")
      (rd "ijexa"    $ l "[<[0!2] [0!2 ~!2]> ~]*2" "~ [f!2] . ~@3 f ~ f f ~")
      (rd "funk"     $ l "0(3,8) . ~ [0 ~] ~@2" "[~ 0]*2")
      (rd "funk150"  $ l "[t@3 ~@5 . ~ <~ t>@2 [~ <t ~>]]/2" "[~@3 f@3 f@2 . ~ f]/2")
      (rd "capoeira" $ l "~ ~ 0 ~" "~ ~ ~ 0")
      (rd "house"    $ l "0*2" "~ 0" "[~ 0]*2" ("[0 0 ~ 0]*2" |* gain 0.8))
      (rd "mrct1"    $ l
          "<[x@3 x@5] [[~ x]!2 . <x x>]>"
          "<x>@3 x"
          (fast 2 $ "x*4" # gain "1 0.8 0.9 0.8")
          (stack ["x*2", fast 2 $ "[~ x]*<1 1 2 1>" |+ up 5]))
      (rd' (slow (7/4))
        "t1" $ l "0@6 0@8" "~@3 0@3 ~@8" ("[0!3 ~]!3 <0 [0*2]>@0.5" # rel 0.2))
      (rd' (slow (7/4))
        "t2" $ l
          ("0@6 0!2 ~@6" |* rel "1 0.4")
          ("~@3 0@3 ~@4 0!2 ~@2" # gain "1 0.8" |* rel "1 0.3")
          ("[0!3 ~]!3 <0 [0*2]>@0.5" # rel 0.2))
:}

-- To be deprecated
-- rs: play a rhythm with a list of sounds
:{
let oldplayrhythm rdef = (stack . zipWith (#) rdef)
    oldfindrhythm rname = case Map.lookup rname rhythms of
                          Just p -> p
                          Nothing -> do [("~" # gain 0)]
    oldr = oldplayrhythm . oldfindrhythm
    oldr' f rname = oldr rname . map f
    rs = oldr' s
:}



-- WIP: Second implementation using tidal dictionary (setF, cF_)


-- makertmname :: String -> Integer -> String
makertmname name idx = "rtm_" ++ name ++ "_" ++ (show idx)

-- makerhythmpairs :: String -> [Pattern Double] -> [(String, Pattern Double)]
makerhythmpairs name patlist = zipWith (\x y -> (makertmname name x, y)) [0..] patlist

-- getrtmvoice :: String -> Int -> Pattern Double
getrtmvoice name idx = cF_ (makertmname name idx)

getpat name = getrtmvoice name 0

-- defrhythm :: String -> [Pattern Double] -> IO ()
:{
defrhythm name pats = mapM_ (\(patname, pat) -> setF patname pat)
    $ zipWith (\idx voice -> (makertmname name idx, voice)) [0..]
    $ pats
    :}




-- dr :: String -> [Pattern Double] -> IO ()
dr = defrhythm


-- New Rhythm Dictionary
-- dr "baiao"    $ l "0@3 0@5" ("0*4" # gain "0.8 0.9 1 0.8" ")
dr "brega"    $ l "0*2" "~@3 0 . ~ 0" "[0 0 0  ~]*2"
dr "ijexa"    $ l "[<[0!2] [0!2 ~!2]> ~]*2" "~ [f!2] . ~@3 f ~ f f ~"
dr "funk"     $ l "0(3,8) . ~ [0 ~] ~@2" "[~ 0]*2"
dr "funk150"  $ l "[t@3 ~@5 . ~ <~ t>@2 [~ <t ~>]]/2" "[~@3 f@3 f@2 . ~ f]/2"
dr "capoeira" $ l "~ ~ 0 ~" "~ ~ ~ 0"

dr "tumbao"   $ l "0" "~ 0 ~ 0*2" "[0*2 . [~ 0] . 0*2 . [~ 0]]"
:{
dr "taala" $ l
  (struct "[t@1.5 t]" $ "2")
  (struct "<[t t t ~ ~] [~ t t t t]>" $ "3 2 5")
  (struct "<[~ [t t] ~ ~ [t t]] [[t t] ~ ~ [t t] [t t]]>" $ "3 5 3 5")
  :}

-- r: plays a rhythm from the state with the passed set of sounds
:{
let r name ss = stack
      $ zipWith (flip (#)) (map s ss)
      $ map (n . getrtmvoice name) [0..10]
:}
