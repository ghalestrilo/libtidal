------------------------------------------------------------------------ Convolutions (ring)

import Data.List (sortBy)

-- @bgold thank you forever for this
:{
prrw :: (a -> b -> c) -> Int -> (Time, Time) -> Pattern a -> Pattern b -> Pattern c
prrw f rot (blen, vlen) beatPattern valuePattern =
  let
    ecompare ev1 ev2 = compare (start $ part ev1) (start $ part ev2)
    beats = sortBy ecompare $ queryArc beatPattern (Arc 0 blen)
    values = fmap value . sortBy ecompare $ queryArc valuePattern (Arc 0 vlen)
    cycles = blen * (fromIntegral $ lcm (length beats) (length values) `div` (length beats))
  in
    _slow cycles $ stack $ zipWith
      (\ev v -> ((start $ part ev) `rotR`) $ _fastGap (1 / ((stop $ part ev) - (start $ part ev))) $ pure (f (value ev) v))
      (sortBy ecompare $ queryArc (_fast cycles $ beatPattern) (Arc 0 blen))
      (Prelude.drop (rot `mod` length values) $ cycle values)
:}

:{
prr :: Int -> (Time, Time) -> Pattern String -> Pattern a -> Pattern a
prr = prrw (flip const)
:}

preplace = prr 0
(<~>) = preplace (1,1)
ring = flip $ preplace (1,1)


-- test
-- 1. use rot for note_offs
-- 2. use value first for ccs
-- 

------------------------------------------------------------------------ Polymetry
:{
let 
    setbpm val = setF "basecps" (val / 120)
    b number = cps ("^basecps" |* 4 |/ number)
    ball' number fns = all ((# b number) . fns)
    ball = (flip ball') id
    ba = ball
    setseq = setI "__seq__"
    seqs = setseq
    sq = squeeze "^__seq__"
    ns = n . sq
    bars signatures = p "__clock__" $ squeeze "^__seq__" (map ((\pat count -> n pat # b count) "0*3") signatures) # gain 0
    seqd = squeeze "^__seq__"
    over n = map (/ n)
:}


let nok key = note . k key

setbpm 120

    -- ns = n . sq 
    -- seqs = setI "__seq__"
    -- bars: set time signatures for "^seq"-indexable sequences 
    -- bars signatures =
    --   p "__clock__" $
    --     squeeze "^__seq__" (map ((\pat count -> n pat # b count) "0*3") signatures)
    --       # s "can"
    --       # gain 0


bars signatures = p "__clock__" $ squeeze "^__seq__" (map ((\pat count -> n pat # b count) "0") signatures)


-- breakpoints: slice a function into a list of section based on breakpoints within [0:1]
let breakpoints bps pat = map (flip zoom $ pat) $ zip ([0] ++ bps) (bps ++ [1])

-- Indices: select items from a list based on indices, container in an input integer list
let indices indexer list = map (\index -> list!!index) indexer
let elems = indices


:{
let nok key = note . k key
    wkeys ks = zipWith nok ks
    nokstack keys = stack . zipWith nok keys
    nokcat keys = cat . zipWith nok keys
    noks = nokstack
    nokc = nokcat
:}
    -- seqchunks chks = seqd . breakpoints (over (sum chks) . drop 1 . scanl (+) 0 $ chks)