
import System.IO (hSetEncoding, stdout, utf8)
import Sound.Tidal.Context
hSetEncoding stdout utf8

:{
customTarget = Target { oName = "SuperCollider" -- Give your target a name
                      , oAddress = "127.0.0.1" -- the target network address
                      , oPort = 57120 -- the target network port
                      , oLatency = 0.4 -- the latency (to smooth network jitter
                      , oSchedule = Live
                      , oWindow = Nothing
                      , oHandshake = True
                      , oBusPort = Nothing
                      }
:}

tidal <- startTidal (customTarget) (defaultConfig {cFrameTimespan = 1/20})


:{

let p = streamReplace tidal
    hush = streamHush tidal
    list = streamList tidal
    mute = streamMute tidal
    unmute = streamUnmute tidal
    solo = streamSolo tidal
    unsolo = streamUnsolo tidal
    once = streamOnce tidal
    first = streamFirst tidal
    asap = once
    nudgeAll = streamNudgeAll tidal
    ogall = streamAll tidal
    resetCycles = streamResetCycles tidal
    setcps = asap . cps
    xfade i = transition tidal True (Sound.Tidal.Transition.xfadeIn 4) i
    xfadeIn i t = transition tidal True (Sound.Tidal.Transition.xfadeIn t) i
    histpan i t = transition tidal True (Sound.Tidal.Transition.histpan t) i
    wait i t = transition tidal True (Sound.Tidal.Transition.wait t) i
    waitT i f t = transition tidal True (Sound.Tidal.Transition.waitT f t) i
    jump i = transition tidal True (Sound.Tidal.Transition.jump) i
    jumpIn i t = transition tidal True (Sound.Tidal.Transition.jumpIn t) i
    jumpIn' i t = transition tidal True (Sound.Tidal.Transition.jumpIn' t) i
    jumpMod i t = transition tidal True (Sound.Tidal.Transition.jumpMod t) i
    mortal i lifespan release = transition tidal True (Sound.Tidal.Transition.mortal lifespan release) i
    interpolate i = transition tidal True (Sound.Tidal.Transition.interpolate) i
    interpolateIn i t = transition tidal True (Sound.Tidal.Transition.interpolateIn t) i
    clutch i = transition tidal True (Sound.Tidal.Transition.clutch) i
    clutchIn i t = transition tidal True (Sound.Tidal.Transition.clutchIn t) i
    anticipate i = transition tidal True (Sound.Tidal.Transition.anticipate) i
    anticipateIn i t = transition tidal True (Sound.Tidal.Transition.anticipateIn t) i
    forId i t = transition tidal False (Sound.Tidal.Transition.mortalOverlay t) i
    --parameters
    pitch = pF "pitch"
    begin = pF "begin"
    res = pF "res"
    vel = pF "vel"
    cutoff = pF "cutoff"
    drive = pF "drive"
    filtertype = pS "filter"
    legato = pF "legato"
    --synth parameters
    pitchbend = pF "pitchbend"
    modwheel = pF "modwheel"
    aftertouch = pF "aftertouch"
    pbend = pitchbend
    modw = modwheel
    atouch = aftertouch
    all = ogall

:}


:{
let setI = streamSetI tidal
    setF = streamSetF tidal
    setS = streamSetS tidal
    setR = streamSetR tidal
    setB = streamSetB tidal
:}

-- WIP: Set global knob mods
setI "global_shuf" "1"
setI "global_chop" "1"

:{

let all f = ogall $ f
          . never (shuffle "^global_shuf")
          . never (chop "^global_chop")

:}