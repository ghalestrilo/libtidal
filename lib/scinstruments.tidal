import Data.Map as M (lookup)
toID strr = Sound.Tidal.ID.ID strr
setF "mididelay" 0

-- Interpretive
:{
let strum' dir i pat = fastcat ((arp dir pat):(take (fromInteger i) $ repeat (degradeBy 1 pat)))
    strum = strum' "up"
    humanize param amt = (|+ param (range (- (amt/10)) (amt/10) $ perlin))
    h = humanize
    hg = humanize gain
:}


-- temp: looping functions
:{
let brakk' n = unit "c" # legato 1 # speed (1/n)
    brakk = brakk' 1
:}

:{
let withLoopback channel pat = stack [ pat, pat # s "loopback" # midichan channel ]
    mm pat = p "mm" $ withLoopback 11 $ pat # s "mm" # midichan 15
    reface pat = p "reface" $ withLoopback 12 $ pat # s "reface" # midichan 0
:}


-- :{
-- let tr idx pat = p (toID $ "tr8s" ++ show idx) $ pat # s "tr"
--       # midinote (36 + idx) # midichan 9
-- :}

:{
let bank' chan device num = asap $ progNum num # s device # midichan chan
    bank = bank' 15
:}


-- TR8S MIDI CC Map
tr8sChanArray = [36,38,43,47,50,37,39,42,46,49,51]
tr8sAltChanArray = [35,40,41,45,48,56,54,44,55,57,59]
tr8sToneCCArray = [20,25,46,49,52,55,58,61,80,83,86]
tr8sDecayCCArray = [23,28,47,50,53,56,59,62,81,84,87]
tr8sCtrlCCArray = [96,97,102,103,104,105,106,107,108,109,110]

-- TR8S CC PER-CHANNEL DEFINITION METHODS
:{
let putTRCC array idx decaypat pat = stack [pat, pat |> ccv decaypat # ccn (array!!idx)]
    tralt = putTRCC tr8sAltChanArray
    trtone = putTRCC tr8sToneCCArray
    trdecay = putTRCC tr8sDecayCCArray
    trctrl = putTRCC tr8sCtrlCCArray
:}

-- TR8S Functions
-- trs "0 1 2 3" = channels bd sd lt and mt played in order
-- tr 2 "0*4" = sd plays 4 times
-- note: to actually record something TR8S can play back, we actually need an additional channel
-- (loopback2?) where the ccs are stored as notes. In order to get daw to play, we have to send notes as #note,
-- which TR8S does not support


:{
let ctrl = modw
    translateEventsToMIDICC array name valueGetter idx pat = ccv (fmap valueGetter $ filterJust $ M.lookup name <$> pat) # ccn (array!!idx)
    noteToTR8STuneCC idx pat = translateEventsToMIDICC tr8sToneCCArray "note" (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational . nvalue) idx pat
    modwToTR8SCtrlCC = translateEventsToMIDICC tr8sCtrlCCArray "modwheel" ((* 127) . max 0 . min 1 . fvalue)
    susToTR8SDecayCC = translateEventsToMIDICC tr8sDecayCCArray "sustain" ((* 127) . max 0 . min 1 . fvalue)
    tr idx pat = p channelname
        $ stack (fmap (\translator -> translator idx patoff) [ noteToTR8STuneCC, susToTR8SDecayCC, modwToTR8SCtrlCC ] ++ [patoff])
        # stack [playbacktarget, rectarget]
      where patoff = pat |+ note (cN0 ("tr8snoteoffset" ++ show idx))
            chan = (tr8sChanArray!!idx)
            playbacktarget = s "tr" # midichan 9 # midinote chan
            rectarget = s "trloopback1" # midichan (pure $ fromIntegral idx) # midinote chan -- actual recording
            channelname = toID $ "tr8s" ++ show (tr8sToneCCArray!!idx)
    trbank num = asap $ progNum num # s "tr"
    trs pats = mapM_ (\(pat,idx) -> tr idx pat) $ zip pats [0..16]
:}

-- read values from tr8s
:{
let trcps = (# cps ((cF_ "tr_tempo") |/ 1200))
    trshuf = (cF0 "tr_shuffle" |/ 127)
    tracc = (cF0 "tr_accent" |/ 127)
    byshuf = sometimesBy trshuf
    byacc = sometimesBy tracc
    trall fn = all $ trcps . fn
:}

-- TRGroups - groups of tr8s channels by functional closeness
:{
let trgroup chans pats = mapM_ (\(pat,idx) -> tr idx pat) $ zip pats chans
    g1 = trgroup [0,1]
    g2 = trgroup [2,3,4]
    g3 = trgroup [5,6]
    g4 = trgroup [7,8]
    g5 = trgroup [9,10]
:}


:{

let d1 = tr 0
    d2 = tr 1
    d3 = tr 2
    d4 = tr 3
    d5 = tr 4
    d6 = tr 5
    d7 = tr 6
    d8 = tr 7
    d9 = tr 8
    d10 = tr 9 
    d11 = tr 10
    d12 = tr 11
    d13 = tr 12
    d14 = tr 13
    d15 = tr 14
    d16 = tr 15

:}


-- TR8S SHORTHANDS
:{

let bd = d1
    sd = d2
    lt = d3
    mt = d4
    ht = d5
    rs = d6
    hc = d7
    ch = d8
    oh = d9
    cc = d10
    rc = d11

:}

-- TR8S OFFSET SHORTHANDS
:{
let troff n val = setI ("tr8snoteoffset" ++ show n) val
    bdoff = troff 0
    sdoff = troff 1
    ltoff = troff 2
    mtoff = troff 3
    htoff = troff 4
    rsoff = troff 5
    hcoff = troff 6
    choff = troff 7
    ohoff = troff 8
    ccoff = troff 9 
    rcoff = troff 10
:}

-- TR8S ALT SHORTHANDS
:{
let bdalt = tralt 0
    sdalt = tralt 1
    ltalt = tralt 2
    mtalt = tralt 3
    htalt = tralt 4
    rsalt = tralt 5
    hcalt = tralt 6
    chalt = tralt 7
    ohalt = tralt 8
    ccalt = tralt 9
    rcalt = tralt 10
:}

-- TR8S TONE SHORTHANDS
:{
let bdtone = trtone 0
    sdtone = trtone 1
    lttone = trtone 2
    mttone = trtone 3
    httone = trtone 4
    rstone = trtone 5
    hctone = trtone 6
    chtone = trtone 7
    ohtone = trtone 8
    cctone = trtone 9
    rctone = trtone 10
:}

-- TR8S DECAY SHORTHANDS
:{
let bddecay = trdecay 0
    sddecay = trdecay 1
    ltdecay = trdecay 2
    mtdecay = trdecay 3
    htdecay = trdecay 4
    rsdecay = trdecay 5
    hcdecay = trdecay 6
    chdecay = trdecay 7
    ohdecay = trdecay 8
    ccdecay = trdecay 9
    rcdecay = trdecay 10
:}

-- TR8S CTRL SHORTHANDS
:{
let bdctrl = trctrl 0
    sdctrl = trctrl 1
    ltctrl = trctrl 2
    mtctrl = trctrl 3
    htctrl = trctrl 4
    rsctrl = trctrl 5
    hcctrl = trctrl 6
    chctrl = trctrl 7
    ohctrl = trctrl 8
    ccctrl = trctrl 9
    rcctrl = trctrl 10
:}

:{
let dawSynthChannel idx pat = p (toID $ "synth" ++ show idx)
                            $ pat
                            # s "loopback"
                            # midichan (idx + 12)
:}

:{
let s1 = dawSynthChannel 0
    s2 = dawSynthChannel 1
    s3 = dawSynthChannel 2
    s4 = dawSynthChannel 3
:}