

-- Part of @key@: Defines the absolute pitch offset
-- root :: Pattern Double -> ControlPattern
let root = pF "root"

-- Part of @key@: Defines the scale for a melody to be played in
-- mode :: Pattern String -> ControlPattern
let mode = pS "mode"

-- Part of @key@: Defines the base for a chord within the scale
-- base :: Pattern Int -> ControlPattern
let base = pI "base"

-- | ON - Apply a function to a pattern when a tag is found "1 2 3 4:1" (1 is the tag, denoted by :)
:{
let tag = pI "tag"
    ntag = grp [mF "note", mI "tag"]
    on tagname lambda = fix lambda (tag tagname)
:}
-- phrase = "{16 14 11 0 ~     16 14 11 4 6 7 6 7 9 7 9 11:1 ~   16:1 14 11:1 6:2 ~ }%8"




-- key     :: Maybe (Pattern Integer, Pattern String),
-- section = Section Nothing 1 []
:{
data Section = Section
  { timesig :: Pattern Time
  , parts   :: [Pattern Double]
  } deriving (Show)
:}

section = Section 1 []

-- Song: { (root, scale), Map <Section>, [voices] }
:{
data Song = Song
  { key      :: (Pattern Integer, Pattern String)
  , sections :: Map.Map String Section
  , voices   :: [Pattern ValueMap]
  } deriving (Show)
:}

song = Song (0, "chromatic") (Map.fromList []) []
