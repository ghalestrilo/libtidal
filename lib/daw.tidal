-- daw [...] | Send multiple channels at once to DAW
:{
let daw pats = p "daw"
        $ stack
        $ zipWith (\channelnumber pat -> bwn channelnumber pat (cF 0.5 $ "daw" ++ (show channelnumber) ++ "amp")) [0, 1, 2, 3, 4, 5] pats
:}

-- $ zipWith (\idx pat -> pat # amp (cF 0.5 $ "m" ++ (show idx) ++ "amp")) [0..]


-- daw<n> pat | Send pattern to daw channel n
:{
let daw0 sus pat = stack [bwn 0 (pat |+ 60) (cF 0.5 "daw0amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
    daw1 sus pat = stack [bwn 1 (pat |+ 60) (cF 0.5 "daw1amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
    daw2 sus pat = stack [bwn 2 (pat |+ 60) (cF 0.5 "daw2amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
    daw3 sus pat = stack [bwn 3 (pat |+ 60) (cF 0.5 "daw3amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
    daw4 sus pat = stack [bwn 4 (pat |+ 60) (cF 0.5 "daw4amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
    daw5 sus pat = stack [bwn 5 (pat |+ 60) (cF 0.5 "daw5amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
    daw6 sus pat = stack [bwn 6 (pat |+ 60) (cF 0.5 "daw6amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
    daw7 sus pat = stack [bwn 7 (pat |+ 60) (cF 0.5 "daw7amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
    daw8 sus pat = stack [bwn 8 (pat |+ 60) (cF 0.5 "daw8amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
    daw9 sus pat = stack [bwn 9 (pat |+ 60) (cF 0.5 "daw9amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
    daw10 sus pat = stack [bwn 10 (pat |+ 60) (cF 0.5 "daw10amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
    daw11 sus pat = stack [bwn 11 (pat |+ 60) (cF 0.5 "daw11amp"), ((~>) sus) $ bwnote (pat |+ 60) # bwv 0 # bwnch 6]
:}

-- :{
-- let daw0 sus pat = bwn 0 (pat |+ 60) (cF 0.5 "daw0amp") # legato 0
--     daw1 sus pat = bwn 1 (pat |+ 60) (cF 0.5 "daw1amp") # legato 0
--     daw2 sus pat = bwn 2 (pat |+ 60) (cF 0.5 "daw2amp") # legato 0
--     daw3 sus pat = bwn 3 (pat |+ 60) (cF 0.5 "daw3amp") # legato 0
--     daw4 sus pat = bwn 4 (pat |+ 60) (cF 0.5 "daw4amp") # legato 0
--     daw5 sus pat = bwn 5 (pat |+ 60) (cF 0.5 "daw5amp") # legato 0
--     daw6 sus pat = bwn 6 (pat |+ 60) (cF 0.5 "daw6amp") # legato 0
--     daw7 sus pat = bwn 7 (pat |+ 60) (cF 0.5 "daw7amp") # legato 0
-- :}

:{
let damp n v = setF ("daw" ++ (show n) ++ "amp") v
    dsus n v = setF ("daw" ++ (show n) ++ "sus") v
:}

:{
let d0' sus ccs pat = p "daw0" $ stack $ [daw0 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 0 a b) ccs)
    d1' sus ccs pat = p "daw1" $ stack $ [daw1 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 1 a b) ccs)
    d2' sus ccs pat = p "daw2" $ stack $ [daw2 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 2 a b) ccs)
    d3' sus ccs pat = p "daw3" $ stack $ [daw3 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 3 a b) ccs)
    d4' sus ccs pat = p "daw4" $ stack $ [daw4 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 4 a b) ccs)
    d5' sus ccs pat = p "daw5" $ stack $ [daw5 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 5 a b) ccs)
    d6' sus ccs pat = p "daw6" $ stack $ [daw6 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 6 a b) ccs)
    d7' sus ccs pat = p "daw7" $ stack $ [daw7 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 7 a b) ccs)
    d0cc = d0' 0.25
    d1cc = d1' 0.25
    d2cc = d2' 0.25
    d3cc = d3' 0.25
    d4cc = d4' 0.25
    d5cc = d5' 0.25
    d6cc = d6' 0.25
    d7cc = d7' 0.25
    d0 = d0cc []
    d1 = d1cc []
    d2 = d2cc []
    d3 = d3cc []
    d4 = d4cc []
    d5 = d5cc []
    d6 = d6cc []
    d7 = d7cc []
:}

-- dXXXX' sus ccs pat = p "dawXXXX" $ stack $ [dawXXXX sus $ round <$> pat] ++ (map (\(a, b) -> bwcc XXXX a b) ccs)
-- dXXXXcc = dXXXX' 0.25
-- dXXXX = dXXXXcc []

:{
let d8' sus ccs pat = p "daw8" $ stack $ [daw8 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 8 a b) ccs)
    d8cc = d8' 0.25
    d8 = d8cc []
    d9' sus ccs pat = p "daw9" $ stack $ [daw9 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 9 a b) ccs)
    d9cc = d9' 0.25
    d9 = d9cc []
    d10' sus ccs pat = p "daw10" $ stack $ [daw10 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 10 a b) ccs)
    d10cc = d10' 0.25
    d10 = d10cc []
    d11' sus ccs pat = p "daw11" $ stack $ [daw11 sus $ round <$> pat] ++ (map (\(a, b) -> bwcc 11 a b) ccs)
    d11cc = d11' 0.25
    d11 = d11cc []
:}

-- CC tuple dictionary
:{
let cc "cycles" "decay" value = (80, value)
    cc "cycles" "color" value = (16, value)
    cc "cycles" "shape" value = (17, value)
    cc "cycles" "sweep" value = (18, value)
:}